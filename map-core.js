class MapCore {
    constructor() {
        this.modal = document.getElementById('modal');
        this.buildingTitle = document.getElementById('building-title');
        this.buildingDescription = document.getElementById('building-description');
        this.floorButtons = document.getElementById('floor-buttons');
        this.closeBtn = document.querySelector('.close');
        this.currentHighlighted = null;
        this.currentBuilding = null;
        this.currentFloor = null;

        this.mapElement = null;
        this.svgContainer = null;
    }

    async init() {
        await this.loadSVG();
        this.mapElement = document.getElementById('map');
        this.makeBuildingsInteractive();
        this.addGlobalClickListener(); // –î–æ–±–∞–≤–∏–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–Ω—è—Ç–∏—è –ø–æ–¥—Å–≤–µ—Ç–∫–∏
        return this;
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–æ–¥ –¥–ª—è —Å–Ω—è—Ç–∏—è –ø–æ–¥—Å–≤–µ—Ç–∫–∏ –ø—Ä–∏ –∫–ª–∏–∫–µ –Ω–∞ –ø—É—Å—Ç–æ–µ –º–µ—Å—Ç–æ
    addGlobalClickListener() {
        document.addEventListener('click', (e) => {
            // –ï—Å–ª–∏ –∫–ª–∏–∫–Ω—É–ª–∏ –Ω–µ –Ω–∞ –∑–¥–∞–Ω–∏–µ –∏ –Ω–µ –Ω–∞ –≤—ã–ø–∞–¥–∞—é—â–∏–π —Å–ø–∏—Å–æ–∫
            if (!e.target.closest('.building') &&
                !e.target.closest('.building-select') &&
                !e.target.closest('.modal') &&
                this.currentHighlighted) {

                this.clearHighlight();

                // –¢–∞–∫–∂–µ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—ã–ø–∞–¥–∞—é—â–∏–π —Å–ø–∏—Å–æ–∫
                const selectElement = document.getElementById('building-select');
                if (selectElement) {
                    selectElement.value = '';
                }
            }
        });
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –ø–æ–¥—Å–≤–µ—Ç–∫–∏
    clearHighlight() {
        if (this.currentHighlighted) {
            this.currentHighlighted.classList.remove('highlighted');
            this.currentHighlighted = null;
            this.currentBuilding = null;
        }
    }

    // –û—Å—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π...
    async loadSVG() {
        try {
            const response = await fetch('assets/kampussouth.svg');
            const svgText = await response.text();

            const mapContainer = document.getElementById('map');
            mapContainer.innerHTML = `
                <div class="svg-container">
                    ${svgText}
                </div>
            `;

            this.svgContainer = mapContainer.querySelector('.svg-container');

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ SVG:', error);
        }
    }

    makeBuildingsInteractive() {
        Object.keys(buildingData).forEach(buildingId => {
            const element = document.getElementById(buildingId);
            if (element) {
                element.classList.add('building');

                if (!element.getAttribute('fill') && !element.querySelector('[fill]')) {
                    element.setAttribute('fill', '#d4d4d4');
                }

                if (!element.querySelector('title')) {
                    const title = document.createElement('title');
                    title.textContent = buildingData[buildingId].title;
                    element.appendChild(title);
                }
            }
        });
    }

    handleBuildingClick(building) {
        const buildingId = building.id;

        if (this.currentHighlighted && this.currentHighlighted !== building) {
            this.currentHighlighted.classList.remove('highlighted');
        }

        building.classList.add('highlighted');
        this.currentHighlighted = building;
        this.currentBuilding = buildingId;

        // –°–æ–∑–¥–∞–µ–º —Å–æ–±—ã—Ç–∏–µ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å –≤—ã–ø–∞–¥–∞—é—â–∏–º —Å–ø–∏—Å–∫–æ–º
        const event = new CustomEvent('buildingSelected', {
            detail: { buildingId }
        });
        document.dispatchEvent(event);

        // –û—Ç–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π (—Ç–æ–ª—å–∫–æ –ø—Ä–∏ –∫–ª–∏–∫–µ –Ω–∞ –∑–¥–∞–Ω–∏–µ)
        this.showBuildingInfo(buildingId);
    }

    // –û—Å—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π...
    showBuildingInfo(buildingId) {
        const data = buildingData[buildingId];

        if (data) {
            this.buildingTitle.textContent = data.title;
            this.buildingDescription.textContent = data.description;
            this.generateFloorButtons(data.floors);
        } else {
            this.buildingTitle.textContent = '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–¥–∞–Ω–∏–∏';
            this.buildingDescription.textContent = '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–∞–Ω–Ω–æ–º –∑–¥–∞–Ω–∏–∏ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.';
            if (this.floorButtons) this.floorButtons.innerHTML = '';
        }
        if (this.modal) this.modal.style.display = 'block';
    }

    generateFloorButtons(floors) {
        if (!this.floorButtons) return;

        this.floorButtons.innerHTML = '';

        floors.forEach(floor => {
            const button = document.createElement('button');
            button.className = 'floor-btn';
            button.textContent = `${floor.number} —ç—Ç–∞–∂`;
            button.setAttribute('data-floor', floor.number);

            button.addEventListener('click', () => {
                this.selectFloor(floor);
                document.querySelectorAll('.floor-btn').forEach(btn => {
                    btn.classList.remove('active');
                });
                button.classList.add('active');
            });

            this.floorButtons.appendChild(button);
        });

        this.currentFloor = null;
        this.updateFloorPlan();
    }

    selectFloor(floor) {
        this.currentFloor = floor;
        this.updateFloorPlan();
        this.updateClassroomsList(floor);
    }

    updateFloorPlan() {
        const floorPlan = document.querySelector('.floor-plan-content');
        if (!floorPlan) return;

        if (!this.currentFloor) {
            floorPlan.innerHTML = `
                <div class="floor-plan-placeholder">üè¢</div>
                <p>–ü–ª–∞–Ω —ç—Ç–∞–∂–∞ –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω –∑–¥–µ—Å—å</p>
                <small>–í—ã–±–µ—Ä–∏—Ç–µ —ç—Ç–∞–∂ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–ª–∞–Ω–∞</small>
            `;
        } else {
            if (this.currentFloor.hasPlan) {
                floorPlan.innerHTML = `
                    <div class="floor-plan-placeholder">üìê</div>
                    <p>–ü–ª–∞–Ω ${this.currentFloor.number} —ç—Ç–∞–∂–∞</p>
                    <small>–ü–ª–∞–Ω —ç—Ç–∞–∂–∞ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è...</small>
                `;
            } else {
                floorPlan.innerHTML = `
                    <div class="floor-plan-placeholder">üìã</div>
                    <p>–ü–ª–∞–Ω ${this.currentFloor.number} —ç—Ç–∞–∂–∞</p>
                    <small>–ü–ª–∞–Ω —ç—Ç–∞–∂–∞ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è</small>
                `;
            }
        }
    }

    closeModal() {
        if (this.modal) this.modal.style.display = 'none';

        if (this.currentHighlighted) {
            // –ù–µ —Å–Ω–∏–º–∞–µ–º –ø–æ–¥—Å–≤–µ—Ç–∫—É –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
            // this.currentHighlighted.classList.remove('highlighted');
            // this.currentHighlighted = null;
        }

        this.currentBuilding = null;
        this.currentFloor = null;

        document.querySelectorAll('.floor-btn').forEach(btn => {
            btn.classList.remove('active');
        });
    }
    // –í –º–µ—Ç–æ–¥ selectFloor –¥–æ–±–∞–≤–ª—è–µ–º:
    selectFloor(floor) {
        this.currentFloor = floor;
        this.updateFloorPlan();
        this.updateClassroomsList(floor); // –≠–¢–û –ù–£–ñ–ù–û –ê–ö–¢–ò–í–ò–†–û–í–ê–¢–¨
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–æ–¥ updateClassroomsList (–µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç):
    updateClassroomsList(floor) {
        const classroomsList = document.getElementById('classrooms-list');
        if (!classroomsList || !this.currentBuilding) return;

        // –ë–µ—Ä–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ classroomsData
        const classrooms = classroomsData[this.currentBuilding]?.[floor.number] || [];

        if (classrooms.length === 0) {
            classroomsList.innerHTML = '<div class="classroom-item">–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ–± –∞—É–¥–∏—Ç–æ—Ä–∏—è—Ö</div>';
            return;
        }

        // –û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫
        classroomsList.innerHTML = '';
        classrooms.forEach(classroom => {
            const item = document.createElement('div');
            item.className = 'classroom-item';
            item.innerHTML = `
            <div class="classroom-info">
                <span class="classroom-number">${classroom.number}</span>
                <span class="classroom-name">${classroom.name}</span>
                <span class="classroom-type ${classroom.type}">
                    ${this.getClassroomTypeName(classroom.type)}
                </span>
            </div>
        `;

            item.addEventListener('click', () => this.selectClassroom(classroom));
            classroomsList.appendChild(item);
        });
    }

    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –Ω–∞–∑–≤–∞–Ω–∏–π —Ç–∏–ø–æ–≤
    getClassroomTypeName(type) {
        const types = {
            'lecture': '–õ–µ–∫—Ü–∏–æ–Ω–Ω–∞—è',
            'seminar': '–°–µ–º–∏–Ω–∞—Ä—Å–∫–∞—è',
            'lab': '–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—è',
            'computer': '–ö–æ–º–ø—å—é—Ç–µ—Ä–Ω—ã–π –∫–ª–∞—Å—Å'
        };
        return types[type] || type;
    }
    selectClassroom(classroom) {
        // –ü–æ–¥—Å–≤–µ—Ç–∫–∞ –≤ —Å–ø–∏—Å–∫–µ
        document.querySelectorAll('.classroom-item').forEach(item => {
            item.style.background = '';
        });
        event.currentTarget.style.background = '#e3f2fd';

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞—É–¥–∏—Ç–æ—Ä–∏–∏
        this.showClassroomDetails(classroom);
    }

    showClassroomDetails(classroom) {
        // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π –≤—ã–≤–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å –¥–ª—è –Ω–∞—á–∞–ª–∞
        console.log('–í—ã–±—Ä–∞–Ω–∞ –∞—É–¥–∏—Ç–æ—Ä–∏—è:', classroom);

        // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤—Å–ø–ª—ã–≤–∞—é—â–µ–µ –æ–∫–Ω–æ –∏–ª–∏ –≤—ã–≤–æ–¥ –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        alert(`–ê—É–¥–∏—Ç–æ—Ä–∏—è ${classroom.number}\n${classroom.name}`);
    }
}